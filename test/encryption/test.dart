import 'dart:async';
import 'dart:io';
import 'dart:typed_data';

import 'package:basic_utils/basic_utils.dart';
import 'package:logger/logger.dart';
import 'package:mobile_app/client.dart';
import 'package:mobile_app/encryption/aes_gcm_encryption.dart';
import 'package:mobile_app/utils/commands.dart';
import 'package:mobile_app/utils/error.dart';
import 'package:mobile_app/utils/util.dart';

/// ByteStream is a class to "emulate" the server
///
class ByteStream implements IOSink {
  Completer completer = Completer();
  BytesBuilder buffer = BytesBuilder();
  List<Uint8List> list = List.empty(growable: true);

  void add(List<int> data) {
    this.buffer.add(data);
    this.list.add(this.buffer.takeBytes());
  }

  @override
  String toString() {
    return this.list.toString();
  }

  @override
  Future close() {
    this.buffer.clear();
    this.completer.complete();
    return completer.future;
  }

  @override
  noSuchMethod(Invocation invocation) => super.noSuchMethod(invocation);
}

/// Creates new [Client] and return it.
/// Returns null upon error.
Future<Client> newClient() async {
  // Open RSA keys, if the user already got one
  Logger.level = Level.debug;

  // final client1 = CryptoUtils.generateRSAKeyPair(keySize: 4096);
  // print(pubKey);
  // RSAPrivateKey privKey = client1.privateKey as RSAPrivateKey;
  String appDocDir = './testdata';
  bool isPub = File('$appDocDir/key.pub').existsSync();
  bool isPriv = File('$appDocDir/key.priv').existsSync();

  if (!(isPub && isPriv)) {
    List lis = await createPemFile(appDocDir);
    String pubKey = CryptoUtils.encodeRSAPublicKeyToPemPkcs1(lis.first);
    return new Client(
      serverIP: "127.0.0.1",
      serverPort: 9129,
      // conn: null,
      privKey: lis.last,
      pubKeyBlock: pubKey,
      addCode: "",
      mapOfChannel: new Map<String, StreamController<Message>>(),
    );
  } else {
    // Public key needs to be in a string format
    String pubKey = File('$appDocDir/key.pub').readAsStringSync();
    // Private key needs to be in a PEM format
    RSAPrivateKey privateKey = CryptoUtils.rsaPrivateKeyFromPemPkcs1(
        File('$appDocDir/key.priv').readAsStringSync());
    return new Client(
      serverIP: "127.0.0.1",
      serverPort: 9129,
      // conn: null,
      privKey: privateKey,
      pubKeyBlock: pubKey,
      addCode: "",
      mapOfChannel: new Map<String, StreamController<Message>>(),
    );
  }
}

/// Creates [RSAPublicKey] & [RSAPrivateKey] and save them locally.
/// Returns true if PEM files are created, false otherwise.
Future<List> createPemFile(String appDocPath) async {
  try {
    final pair = CryptoUtils.generateRSAKeyPair(keySize: rsaKeySize);
    // Examine the generated key-pair
    final rsaPublic = pair.publicKey as RSAPublicKey;
    final rsaPrivate = pair.privateKey as RSAPrivateKey;

    File('$appDocPath/key.priv').writeAsStringSync(
        CryptoUtils.encodeRSAPrivateKeyToPemPkcs1(rsaPrivate));
    File('$appDocPath/key.pub')
        .writeAsStringSync(CryptoUtils.encodeRSAPublicKeyToPemPkcs1(rsaPublic));

    return [rsaPublic, rsaPrivate];
  } catch (e) {
    print(e);
  }
  return [];
}

Future<void> writeBinary(IOSink writer, String filename,
    RSAPublicKey receiverPubKey, RSAPrivateKey senderPrivateKey) async {
  AesGcmChunk encrypt = encryptSetup(filename);
  await encrypt.encrypt(writer, 'jaehaPub', 'key');
}

// Message readMessage(Uint8List element) {
//
// }

Uint8List readNBytes(Uint8List reader, int size) {
  try {
    Uint8List data = reader.sublist(6, size);
    return data;
  } catch (e) {
    print(e);
    return Uint8List(0);
  }
}

void main() async {
  Client robin = await newClient();
  robin.connect();
  RSAPublicKey robinPub =
      CryptoUtils.rsaPublicKeyFromPemPkcs1(robin.pubKeyBlock);
  // create robin public key
  String jaehaPubStr = File('./testdata/jaehaPub.pub').readAsStringSync();

  RSAPublicKey jaehaPub = CryptoUtils.rsaPublicKeyFromPemPkcs1(jaehaPubStr);

  String fileName = "./testdata/short_txt.txt";
  ByteStream test = ByteStream();

  await writeBinary(test, fileName, jaehaPub, robin.privKey);

  print(test);

  // ByteStream test2 = ByteStream();
  Uint8List encryptedData = Uint8List.fromList([
    0,
    0,
    2,
    0,
    0,
    12,
    94,
    161,
    117,
    215,
    36,
    156,
    89,
    188,
    115,
    40,
    169,
    114,
    90,
    102,
    132,
    80,
    14,
    237,
    28,
    61,
    100,
    161,
    199,
    14,
    137,
    202,
    204,
    161,
    16,
    7,
    32,
    39,
    189,
    143,
    99,
    3,
    51,
    114,
    138,
    35,
    194,
    3,
    120,
    95,
    208,
    209,
    41,
    25,
    134,
    22,
    26,
    218,
    110,
    75,
    149,
    221,
    232,
    6,
    116,
    129,
    227,
    47,
    129,
    199,
    195,
    116,
    211,
    26,
    49,
    205,
    144,
    26,
    123,
    8,
    200,
    2,
    163,
    158,
    123,
    47,
    38,
    172,
    43,
    148,
    229,
    154,
    59,
    29,
    100,
    206,
    162,
    237,
    161,
    63,
    52,
    145,
    39,
    206,
    162,
    68,
    216,
    33,
    165,
    242,
    98,
    21,
    146,
    158,
    64,
    213,
    221,
    205,
    191,
    77,
    45,
    140,
    86,
    39,
    242,
    70,
    137,
    175,
    133,
    237,
    84,
    127,
    80,
    236,
    217,
    135,
    1,
    197,
    83,
    234,
    79,
    63,
    41,
    235,
    48,
    125,
    241,
    77,
    193,
    70,
    253,
    252,
    52,
    213,
    66,
    14,
    50,
    240,
    178,
    200,
    175,
    176,
    96,
    79,
    8,
    169,
    50,
    151,
    90,
    57,
    248,
    134,
    64,
    130,
    23,
    171,
    204,
    165,
    228,
    28,
    236,
    107,
    99,
    111,
    196,
    237,
    9,
    251,
    68,
    238,
    96,
    3,
    202,
    118,
    1,
    117,
    121,
    222,
    226,
    198,
    135,
    97,
    163,
    51,
    56,
    166,
    140,
    199,
    19,
    251,
    247,
    130,
    246,
    91,
    189,
    103,
    84,
    144,
    194,
    250,
    39,
    242,
    158,
    118,
    79,
    8,
    87,
    51,
    68,
    132,
    122,
    151,
    100,
    104,
    43,
    37,
    199,
    14,
    217,
    77,
    4,
    124,
    174,
    16,
    133,
    143,
    34,
    122,
    40,
    168,
    170,
    208,
    211,
    160,
    169,
    147,
    68,
    228,
    81,
    138,
    161,
    223,
    167,
    60,
    251,
    194,
    109,
    36,
    81,
    140,
    79,
    80,
    102,
    216,
    124,
    225,
    215,
    110,
    210,
    88,
    246,
    176,
    240,
    82,
    20,
    231,
    250,
    250,
    123,
    148,
    197,
    75,
    119,
    187,
    6,
    159,
    136,
    129,
    85,
    224,
    185,
    162,
    104,
    189,
    200,
    111,
    226,
    213,
    191,
    156,
    139,
    227,
    37,
    93,
    96,
    123,
    125,
    113,
    185,
    73,
    228,
    79,
    4,
    100,
    165,
    21,
    88,
    170,
    162,
    185,
    4,
    59,
    25,
    117,
    194,
    60,
    88,
    7,
    224,
    22,
    211,
    143,
    182,
    187,
    144,
    144,
    97,
    100,
    62,
    72,
    21,
    47,
    28,
    189,
    11,
    250,
    9,
    131,
    125,
    218,
    159,
    214,
    250,
    8,
    185,
    248,
    199,
    230,
    252,
    52,
    81,
    154,
    134,
    146,
    111,
    17,
    13,
    207,
    220,
    249,
    7,
    99,
    113,
    1,
    48,
    166,
    157,
    82,
    201,
    155,
    24,
    170,
    90,
    39,
    147,
    65,
    186,
    71,
    40,
    120,
    208,
    19,
    60,
    179,
    234,
    162,
    13,
    113,
    215,
    89,
    121,
    192,
    205,
    39,
    194,
    71,
    236,
    58,
    201,
    235,
    18,
    5,
    109,
    232,
    93,
    157,
    97,
    238,
    199,
    12,
    64,
    226,
    97,
    30,
    143,
    65,
    179,
    178,
    3,
    121,
    135,
    184,
    172,
    72,
    29,
    3,
    108,
    192,
    111,
    187,
    190,
    20,
    5,
    238,
    220,
    193,
    107,
    138,
    171,
    78,
    71,
    244,
    198,
    32,
    107,
    0,
    122,
    176,
    9,
    11,
    190,
    129,
    215,
    79,
    162,
    151,
    192,
    17,
    197,
    190,
    32,
    163,
    31,
    51,
    37,
    67,
    155,
    110,
    241,
    245,
    178,
    78,
    38,
    102,
    61,
    141,
    195,
    212,
    226,
    118,
    136,
    109,
    128,
    119,
    97,
    194,
    219,
    163,
    45,
    246,
    106,
    85,
    11,
    99,
    232,
    145,
    133,
    22,
    0,
    0,
    2,
    0,
    0,
    12,
    81,
    190,
    47,
    220,
    68,
    33,
    142,
    223,
    190,
    122,
    179,
    216,
    202,
    34,
    127,
    26,
    155,
    132,
    8,
    154,
    35,
    35,
    196,
    67,
    85,
    226,
    28,
    66,
    212,
    148,
    41,
    250,
    231,
    72,
    60,
    30,
    69,
    12,
    219,
    186,
    204,
    150,
    217,
    86,
    29,
    32,
    254,
    160,
    242,
    51,
    136,
    151,
    176,
    7,
    86,
    129,
    127,
    135,
    74,
    215,
    142,
    17,
    75,
    213,
    78,
    28,
    224,
    255,
    198,
    180,
    39,
    158,
    248,
    192,
    254,
    145,
    104,
    137,
    187,
    12,
    39,
    137,
    188,
    159,
    170,
    3,
    3,
    194,
    115,
    219,
    1,
    72,
    107,
    32,
    191,
    89,
    13,
    117,
    107,
    57,
    103,
    154,
    160,
    109,
    115,
    67,
    171,
    126,
    139,
    84,
    146,
    124,
    132,
    94,
    129,
    240,
    176,
    113,
    44,
    10,
    117,
    172,
    143,
    131,
    118,
    42,
    62,
    215,
    123,
    126,
    203,
    1,
    58,
    134,
    215,
    250,
    183,
    88,
    157,
    88,
    19,
    229,
    118,
    142,
    140,
    41,
    74,
    127,
    164,
    201,
    176,
    226,
    229,
    71,
    66,
    35,
    116,
    144,
    221,
    146,
    4,
    25,
    231,
    90,
    93,
    38,
    176,
    0,
    129,
    94,
    151,
    34,
    148,
    12,
    98,
    33,
    3,
    241,
    72,
    120,
    96,
    15,
    172,
    49,
    166,
    79,
    81,
    57,
    158,
    16,
    109,
    5,
    116,
    80,
    101,
    56,
    72,
    141,
    243,
    88,
    89,
    184,
    108,
    152,
    111,
    162,
    112,
    76,
    140,
    47,
    66,
    95,
    189,
    194,
    193,
    164,
    62,
    120,
    163,
    203,
    201,
    165,
    253,
    239,
    55,
    247,
    43,
    232,
    243,
    217,
    202,
    87,
    173,
    248,
    16,
    126,
    79,
    131,
    167,
    45,
    124,
    233,
    34,
    119,
    39,
    68,
    245,
    185,
    10,
    45,
    175,
    88,
    253,
    226,
    5,
    108,
    36,
    219,
    174,
    228,
    16,
    240,
    138,
    137,
    38,
    168,
    27,
    70,
    97,
    4,
    166,
    253,
    181,
    98,
    8,
    207,
    242,
    161,
    160,
    90,
    28,
    21,
    198,
    65,
    175,
    139,
    115,
    248,
    159,
    14,
    196,
    254,
    80,
    149,
    115,
    133,
    240,
    53,
    83,
    92,
    165,
    219,
    162,
    67,
    159,
    15,
    49,
    210,
    84,
    205,
    45,
    156,
    249,
    239,
    47,
    158,
    72,
    102,
    138,
    46,
    238,
    169,
    212,
    50,
    219,
    52,
    71,
    106,
    142,
    97,
    238,
    185,
    235,
    19,
    138,
    31,
    39,
    153,
    39,
    221,
    30,
    104,
    163,
    56,
    20,
    237,
    193,
    217,
    56,
    246,
    42,
    232,
    111,
    126,
    144,
    142,
    90,
    85,
    236,
    180,
    32,
    175,
    127,
    105,
    207,
    140,
    197,
    144,
    20,
    193,
    151,
    9,
    191,
    161,
    233,
    229,
    85,
    154,
    33,
    227,
    41,
    187,
    126,
    176,
    213,
    128,
    220,
    107,
    210,
    178,
    43,
    13,
    119,
    187,
    92,
    149,
    63,
    86,
    174,
    207,
    166,
    4,
    45,
    5,
    129,
    12,
    128,
    42,
    112,
    29,
    191,
    142,
    157,
    32,
    35,
    94,
    18,
    2,
    43,
    46,
    227,
    96,
    46,
    171,
    115,
    181,
    205,
    107,
    77,
    30,
    253,
    255,
    29,
    56,
    148,
    4,
    127,
    156,
    31,
    52,
    228,
    41,
    234,
    53,
    52,
    172,
    222,
    91,
    135,
    1,
    37,
    41,
    44,
    85,
    168,
    167,
    71,
    214,
    34,
    214,
    49,
    18,
    173,
    72,
    211,
    221,
    70,
    141,
    74,
    249,
    205,
    175,
    255,
    149,
    73,
    139,
    97,
    165,
    185,
    216,
    121,
    2,
    125,
    15,
    2,
    237,
    85,
    195,
    7,
    151,
    188,
    135,
    173,
    66,
    145,
    138,
    248,
    86,
    224,
    160,
    200,
    1,
    170,
    77,
    59,
    18,
    123,
    85,
    89,
    29,
    98,
    167,
    0,
    0,
    0,
    12,
    0,
    12,
    204,
    79,
    58,
    74,
    31,
    255,
    68,
    231,
    106,
    24,
    135,
    23,
    0,
    0,
    0,
    26,
    0,
    12,
    41,
    191,
    161,
    69,
    15,
    42,
    233,
    120,
    68,
    139,
    4,
    164,
    72,
    157,
    147,
    140,
    156,
    75,
    80,
    84,
    172,
    57,
    135,
    217,
    97,
    140,
    0,
    0,
    0,
    12,
    0,
    12,
    14,
    180,
    49,
    203,
    154,
    175,
    139,
    156,
    224,
    243,
    171,
    4,
    0,
    0,
    0,
    20,
    0,
    12,
    40,
    182,
    28,
    180,
    138,
    178,
    43,
    60,
    117,
    48,
    73,
    33,
    161,
    105,
    2,
    163,
    204,
    224,
    25,
    79
  ]);

  AesGcmChunk decrypt = decryptSetup();

  StreamController<Message> controller = StreamController<Message>();
  while (encryptedData.length != 0) {
    print(encryptedData.length);
    int size = bytesToUint32(encryptedData);
    int errorCode = encryptedData[4];
    int commandCode = encryptedData[5];
    Uint8List data = Uint8List(0);
    if (errorCode != 0) {
      // if errorCode is not in Error class, then return unknown Error
      if (!errorsList.asMap().containsKey(errorCode)) {
        errorCode = UnknownCodeError.code;
        print('something is wrong');
      }
    }
    if (size != 0) {
      data = readNBytes(encryptedData, size);
      encryptedData = encryptedData.sublist(6 + size);
    }
    Message msg =
        Message(size, errorsList[errorCode], commandsList[commandCode], data);
    controller.add(msg);
  }

  print('Ready to decrypt');

  await decrypt.decrypt(
      controller.stream, './testdata/jaehaPub.pub', './testdata/key');
}